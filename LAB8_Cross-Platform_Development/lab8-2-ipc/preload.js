const { contextBridge, ipcRenderer } = require('electron');

console.log('üåâ [PRELOAD] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ security bridge...');

contextBridge.exposeInMainWorld('electronAPI', {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    sendMessage: (message) => {
        console.log('üì§ [PRELOAD] ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', message);
        return ipcRenderer.invoke('send-message', message);
    },

    sayHello: (name) => {
        console.log('üëã [PRELOAD] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢:', name);
        return ipcRenderer.invoke('say-hello', name);
    },

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö agent wallboard
    getAgents: () => {
        console.log('üìä [PRELOAD] ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents');
        return ipcRenderer.invoke('get-agents');
    },

    changeAgentStatus: (agentId, newStatus) => {
        console.log(`üîÑ [PRELOAD] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${agentId} ‡πÄ‡∏õ‡πá‡∏ô ${newStatus}`);
        return ipcRenderer.invoke('change-agent-status', { agentId, newStatus });
    },

    authenticate: (agentId, password) => ipcRenderer.invoke('authenticate', { agentId, password }),

    // listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö event ‡πÄ‡∏°‡∏∑‡πà‡∏≠ agent ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    onAgentStatusUpdated: (callback) => {
        const listener = (event, payload) => callback(payload);
        ipcRenderer.on('agent-status-updated', listener);
        return () => ipcRenderer.removeListener('agent-status-updated', listener);
    }
});

console.log('‚úÖ [PRELOAD] Security bridge ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß');